services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    networks:
      - ml-scorer
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: bitnami/kafka:3.7
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - ml-scorer
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9093 --list"]
      interval: 20s
      timeout: 15s
      retries: 30
      start_period: 60s

  # --- ИСПРАВЛЕННЫЙ СЕРВИС (ВЕРСИЯ 2) ---
  kafka-setup:
    image: bitnami/kafka:3.7
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - ml-scorer
    command:
      - /bin/bash
      - -c
      - |
        echo "--- Waiting for Kafka to be truly ready... ---"
        sleep 5

        until kafka-topics.sh --bootstrap-server kafka:9093 --list; do
          echo "Kafka is not ready yet, waiting..."
          sleep 5
        done
        
        echo "--- Kafka is ready. Creating topics... ---"
        
        kafka-topics.sh --bootstrap-server kafka:9093 --create --if-not-exists --topic transactions --partitions 3 --replication-factor 1
        kafka-topics.sh --bootstrap-server kafka:9093 --create --if-not-exists --topic scoring --partitions 3 --replication-factor 1
        
        echo "--- Topics created successfully. Listing topics: ---"
        kafka-topics.sh --bootstrap-server kafka:9093 --list

        echo "--- kafka-setup has finished its job. Keeping container alive. ---"
        tail -f /dev/null

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka-setup
    networks:
      - ml-scorer
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093

  postgres:
    image: postgres:14.8
    networks:
      - ml-scorer
    environment:
      POSTGRES_DB: fraud_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
    ports:
      - "5432:5432"
    volumes:
      - ./database_writer/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fraud_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  fraud_detector:
    build: ./fraud_detector
    networks:
      - ml-scorer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_TRANSACTIONS_TOPIC: "transactions"
      KAFKA_SCORING_TOPIC: "scoring"
    depends_on:
      - kafka-setup
    command: ["python", "/app/app.py"]

  database_writer:
    build: ./database_writer
    networks:
      - ml-scorer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_TOPIC: "scoring"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: fraud_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
    depends_on:
      - kafka-setup
      - postgres
    command: ["python", "/app/app.py"]

  interface:
    build: ./interface
    networks:
      - ml-scorer
    ports:
      - "8501:8501"
    environment:
      KAFKA_BROKERS: "kafka:9093"
      KAFKA_TOPIC: "transactions"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
    depends_on:
      - kafka-setup
      - postgres

volumes:
  postgres_data:

networks:
  ml-scorer:
    driver: bridge