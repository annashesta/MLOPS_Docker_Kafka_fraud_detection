"""
–ò—Ç–æ–≥–æ–≤—ã–π Streamlit UI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ñ—Ä–æ–¥–∞.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Kafka –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–æ—Ä–∏–Ω–≥–∞
–ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–∑ PostgreSQL.
"""

import streamlit as st
import pandas as pd
from kafka import KafkaProducer
import json
import uuid
import os
import time
import psycopg2
from psycopg2 import OperationalError
import matplotlib.pyplot as plt
import matplotlib.dates as mdates # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞ –æ—Å–∏ X Matplotlib
# import datetime # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
# st.set_page_config() –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ê–ë–°–û–õ–Æ–¢–ù–û –ü–ï–†–í–û–ô Streamlit –∫–æ–º–∞–Ω–¥–æ–π –≤ —Å–∫—Ä–∏–ø—Ç–µ!
st.set_page_config(layout="wide") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∏—Ä–æ–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
st.title("–°–∏—Å—Ç–µ–º–∞ –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§—Ä–æ–¥–∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# –ü–æ—Ä–æ–≥ —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –§–∞–π–ª threshold.json –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.
OPTIMAL_THRESHOLD = 0.32 # –ü–æ—Ä–æ–≥ —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä—É—á–Ω—É—é –ø–æ—Ä–æ–≥–µ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.info(f"–ü–æ—Ä–æ–≥ —Ñ—Ä–æ–¥–∞: {OPTIMAL_THRESHOLD:.4f}")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –≤—Ä–µ–º–µ–Ω–∏ (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
# –£–¥–∞–ª–µ–Ω—ã, —Ç.–∫. —Ä–µ–∂–∏–º "—Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏" –ø–æ —Å–µ–∫—É–Ω–¥–∞–º —É–±—Ä–∞–Ω.


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º ---

def get_db_connection():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        conn = psycopg2.connect(
            host=os.getenv('POSTGRES_HOST', 'postgres'),
            port=os.getenv('POSTGRES_PORT', 5432),
            dbname=os.getenv('POSTGRES_DB', 'fraud_db'), # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –≤ docker-compose.yaml
            user=os.getenv('POSTGRES_USER', 'postgres'),
            password=os.getenv('POSTGRES_PASSWORD', 'example')
        )
        return conn
    except OperationalError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_kafka_producer():
    """
    –°–æ–∑–¥–∞–µ—Ç Kafka Producer.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Producer –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        producer = KafkaProducer(
            bootstrap_servers=os.getenv("KAFKA_BROKERS", "kafka:9093"),
            value_serializer=lambda v: json.dumps(v).encode("utf-8"), # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON
            security_protocol="PLAINTEXT" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        )
        return producer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka: {e}")
        return None

def fetch_scores_from_db(conn):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–æ—Ä–∏–Ω–≥–µ –∏–∑ PostgreSQL:
    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∫–æ—Ä–æ–≤ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.
    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∫–æ—Ä–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ DataFrame.
    """
    if not conn:
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ DataFrame –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    try:
        # 1. –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è)
        query_fraud = """
        SELECT transaction_id, score, fraud_flag, received_at
        FROM scores
        WHERE fraud_flag = TRUE
        ORDER BY received_at DESC
        LIMIT 10
        """
        df_fraud = pd.read_sql_query(query_fraud, conn)

        # 2. –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 1000 —Å–∫–æ—Ä–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        # –í–∞–∂–Ω–æ: –≤—ã–±–∏—Ä–∞–µ–º 1000 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π (DESC)
        query_scores_and_time = """
        SELECT transaction_id, score, received_at
        FROM scores
        ORDER BY received_at DESC
        LIMIT 1000
        """
        df_scores_and_time = pd.read_sql_query(query_scores_and_time, conn)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã (—Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±–µ—Ü 'score')
        df_scores_hist = df_scores_and_time[['score']]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ 'received_at' - datetime
        df_scores_plot = df_scores_and_time.copy()
        df_scores_plot['received_at'] = pd.to_datetime(df_scores_plot['received_at'])
        
        # –í–∞–∂–Ω–æ: –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
        df_scores_plot = df_scores_plot.sort_values(by='received_at', ascending=True)

        return df_fraud, df_scores_hist, df_scores_plot
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame()

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
tab1, tab2 = st.tabs(["üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–∫–æ—Ä–∏–Ω–≥–∞"]) # –í–∫–ª–∞–¥–∫–∞ —Ç–µ–ø–µ—Ä—å –±–µ–∑ "Real-time"

# –í–∫–ª–∞–¥–∫–∞ "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
with tab1:
    st.header("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Kafka")
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, test_transactions.csv)",
        type=["csv"]
    )
    
    if uploaded_file:
        st.success(f"–§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"):
            producer = get_kafka_producer()
            if producer:
                try:
                    df = pd.read_csv(uploaded_file)
                    st.write("–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", df.head(3))
                    
                    progress_text = "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Kafka..."
                    progress_bar = st.progress(0, text=progress_text)
                    total_rows = len(df)
                    
                    for idx, row in df.iterrows():
                        transaction_id = str(uuid.uuid4()) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        message = {
                            "transaction_id": transaction_id,
                            "data": row.to_dict() # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka
                        }
                        producer.send(os.getenv("KAFKA_TOPIC", "transactions"), value=message)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                        percent_complete = (idx + 1) / total_rows
                        progress_bar.progress(percent_complete, text=f"–û—Ç–ø—Ä–∞–≤–∫–∞... {idx + 1}/{total_rows}")
                        time.sleep(0.005) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    
                    producer.flush() # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
                    progress_bar.progress(1.0, text="–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    st.success(f"–í—Å–µ {total_rows} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Kafka.")

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            else:
                st.warning("–ü—Ä–æ–¥—é—Å–µ—Ä Kafka –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka.")

# –í–∫–ª–∞–¥–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–∫–æ—Ä–∏–Ω–≥–∞"
with tab2:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–∫–æ—Ä–∏–Ω–≥–∞")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        conn = get_db_connection()
        if conn:
            try:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                st.markdown(f"**–ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–∞ —Ñ—Ä–æ–¥–∞ (fraud_flag = 1, –µ—Å–ª–∏ score >= –ø–æ—Ä–æ–≥–∞):** `{OPTIMAL_THRESHOLD:.4f}`")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                df_fraud, df_scores_hist, df_scores_plot = fetch_scores_from_db(conn)
                
                # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
                st.subheader("üö© –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–ª–∞–≥–æ–º —Ñ—Ä–æ–¥–∞:")
                if not df_fraud.empty:
                    st.dataframe(df_fraud, use_container_width=True) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º DataFrame
                else:
                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–ª–∞–≥–æ–º —Ñ—Ä–æ–¥–∞.")

                # --- –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ–≤ ---
                st.subheader("üìà –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):")
                if not df_scores_hist.empty:
                    fig_hist, ax_hist = plt.subplots(figsize=(10, 4)) # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É Matplotlib
                    ax_hist.hist(df_scores_hist['score'], bins=20, edgecolor='black', alpha=0.7)
                    ax_hist.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
                    ax_hist.set_xlabel('–°–∫–æ—Ä')
                    ax_hist.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
                    ax_hist.set_xlim(0, 1) # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª –æ—Å–∏ X –æ—Ç 0 –¥–æ 1
                    ax_hist.axvline(OPTIMAL_THRESHOLD, color='r', linestyle='dashed', linewidth=2, label=f'–ü–æ—Ä–æ–≥: {OPTIMAL_THRESHOLD:.4f}')
                    ax_hist.legend() # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è –ø–æ—Ä–æ–≥–∞
                    st.pyplot(fig_hist) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ Streamlit
                    plt.close(fig_hist) # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
                else:
                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.")

                # --- –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ---
                st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 1000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏):")
                if not df_scores_plot.empty:
                    fig_line, ax_line = plt.subplots(figsize=(12, 5)) # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É Matplotlib

                    # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: –æ—Å—å X - –≤—Ä–µ–º—è, –æ—Å—å Y - —Å–∫–æ—Ä
                    ax_line.plot(df_scores_plot['received_at'], df_scores_plot['score'], 
                                 marker='o', linestyle='-', markersize=4, alpha=0.7)
                    ax_line.set_title('–°–∫–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)')
                    ax_line.set_xlabel('–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') # –ß–µ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å –æ—Å–∏ X
                    ax_line.set_ylabel('–°–∫–æ—Ä') # –ß–µ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å –æ—Å–∏ Y
                    ax_line.set_ylim(0, 1) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª –æ—Å–∏ Y –æ—Ç 0 –¥–æ 1 –¥–ª—è —Å–∫–æ—Ä–æ–≤

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X (–≤—Ä–µ–º–µ–Ω–∏) –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    ax_line.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M:%S')) # –§–æ—Ä–º–∞—Ç: –ì–æ–¥-–ú–µ—Å—è—Ü-–î–µ–Ω—å –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã:–°–µ–∫—É–Ω–¥—ã
                    fig_line.autofmt_xdate() # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–∫–ª–æ–Ω –º–µ—Ç–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏–π

                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –ø–æ—Ä–æ–≥–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ–≤
                    ax_line.axhline(OPTIMAL_THRESHOLD, color='r', linestyle='dashed', linewidth=2, label=f'–ü–æ—Ä–æ–≥: {OPTIMAL_THRESHOLD:.4f}')
                    ax_line.legend() # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è –ø–æ—Ä–æ–≥–∞

                    st.pyplot(fig_line) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ Streamlit
                    plt.close(fig_line) # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
                else:
                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∫–æ—Ä–æ–≤.")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            finally:
                if conn:
                    conn.close()
