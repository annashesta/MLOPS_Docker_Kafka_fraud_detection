"""Streamlit UI"""

# file: interface/app.py
import streamlit as st
import pandas as pd
from kafka import KafkaProducer
import json
import uuid
import os
import time
import psycopg2
from psycopg2 import OperationalError
import matplotlib.pyplot as plt # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        conn = psycopg2.connect(
            host=os.getenv('POSTGRES_HOST', 'postgres'),
            port=os.getenv('POSTGRES_PORT', 5432),
            dbname=os.getenv('POSTGRES_DB', 'fraud_db'),
            user=os.getenv('POSTGRES_USER', 'postgres'),
            password=os.getenv('POSTGRES_PASSWORD', 'example')
        )
        return conn
    except OperationalError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_kafka_producer():
    """–°–æ–∑–¥–∞–µ—Ç Kafka Producer."""
    try:
        producer = KafkaProducer(
            bootstrap_servers=os.getenv("KAFKA_BROKERS", "kafka:9093"),
            value_serializer=lambda v: json.dumps(v).encode("utf-8"),
            security_protocol="PLAINTEXT"
        )
        return producer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka: {e}")
        return None

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

st.set_page_config(layout="wide")
st.title("–°–∏—Å—Ç–µ–º–∞ –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§—Ä–æ–¥–∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

# --- –ö–æ–ª–æ–Ω–∫–∞ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
col1, col2 = st.columns(2)

with col1:
    st.header("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Kafka")
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏",
        type=["csv"]
    )
    
    if uploaded_file:
        st.success(f"–§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"):
            producer = get_kafka_producer()
            if producer:
                try:
                    df = pd.read_csv(uploaded_file)
                    st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞:", df.head(3))
                    
                    progress_bar = st.progress(0, text="–û—Ç–ø—Ä–∞–≤–∫–∞...")
                    total_rows = len(df)
                    
                    for idx, row in df.iterrows():
                        transaction_id = str(uuid.uuid4())
                        message = {
                            "transaction_id": transaction_id,
                            "data": row.to_dict()
                        }
                        producer.send(os.getenv("KAFKA_TOPIC", "transactions"), value=message)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                        percent_complete = (idx + 1) / total_rows
                        progress_bar.progress(percent_complete, text=f"–û—Ç–ø—Ä–∞–≤–∫–∞... {idx + 1}/{total_rows}")
                        time.sleep(0.01) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                    
                    producer.flush()
                    progress_bar.progress(1.0, text="–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    st.success(f"–í—Å–µ {total_rows} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# --- –ö–æ–ª–æ–Ω–∫–∞ 2: –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
with col2:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–∫–æ—Ä–∏–Ω–≥–∞")
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –∏ –ü–æ–∫–∞–∑–∞—Ç—å –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        conn = get_db_connection()
        if conn:
            try:
                # 1. –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                st.subheader("üö© –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–ª–∞–≥–æ–º —Ñ—Ä–æ–¥–∞")
                query_fraud = "SELECT transaction_id, score, fraud_flag, received_at FROM scores WHERE fraud_flag = TRUE ORDER BY received_at DESC LIMIT 10"
                df_fraud = pd.read_sql_query(query_fraud, conn)
                
                if not df_fraud.empty:
                    st.dataframe(df_fraud)
                else:
                    st.info("–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                # 2. –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
                query_scores = "SELECT score FROM (SELECT score, received_at FROM scores ORDER BY received_at DESC LIMIT 100) AS latest_scores"
                df_scores = pd.read_sql_query(query_scores, conn)

                if not df_scores.empty:
                    fig, ax = plt.subplots()
                    ax.hist(df_scores['score'], bins=20, edgecolor='black') # 20 –±–∏–Ω–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é
                    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤')
                    ax.set_xlabel('–°–∫–æ—Ä')
                    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
                    st.pyplot(fig) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ Matplotlib
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            finally:
                if conn: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    conn.close()